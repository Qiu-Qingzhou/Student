<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--指定要实现的接口-->
<mapper namespace="com.mybatis.dao.Userdao">

    <!--实现查询操作,返回值类型要写全类名-->
    <!--因为起了别名,就可以不用全类名了,推荐还是使用全类名-->
    <select id="getuserbyid" resultType="User">
    select * from person where id = #{id}
  </select>

    <!--传参说明
    1)、单个参数:
    传入基本类型:
    取值: #{随便写}
    传入pojo:

    2)、多个参数:
    取值: #{参数名}是无效了:
    可用: 0,1 (参数的索引)或者param1 , param2 (第几个参数paramN)
    原因:只要传入了多个参数: mybatis会自动的将这些参数封装在一个map中;
    封装时使用的key就是参数的索引和参数的第几个表示
    Map<string,object> map = new HashMap<>() ;
    map. put("1",传入的值) ;map.put("2",“传入的值");
    #{key }就是从这个map中取值:

    3)、@Param: 为参数指定key;命名参数:
    我们可以告诉mybatis,封装参数map的时候别乱来，使用我们指定的key

    4) 传入了pojo (javaBean)
    取值: #{pojo的属性名}

    5)、传入了map :将多个要使用的参数封装起来
    取值: #{key}

    扩展:多个参数:自动封装map;
    method01 (@Param("id")Integer id,String empName , Employee employee);
    Integer id -> #{id}
    String empName -> #{param2}
    Employee employee (取出这个里面的email) - >#{param3. email}

    实际上在mybatis中:两种取值方式:
    #{属性名}:是参数预编译的方式，参数的位置都是用?替代。参数后来都是预编译设置进去的:安全，不会有sql注入问题
    ${属性名}:不是参数预编译，而是直接和sq1语句进行拼串:不安全:
    有: sq1语句只有参数位置是支持预编译的:,如果动态取表名只能使用${}
    -->

    <!--查询返回多个值
    resultType="". 如果返回的是列表，写的是列表里面元素的类型

    查询单条记录封装map,列名为key,值为value resultType="map"

    查询多条记录封装map,key就是这个记录的主键: value就是这条记录封装好的对象:
    resultType= "com. atguigu. bean . Employee"

    *把查询的记录的id的值作为key封装这个mapl
*/
    @Mapkey("id")
    public Map<Integer, Employee> getAll EmpsReturnMap(;

    -->
    <select id="getuserbyidandname" resultType="User">
        select * from person where id = #{id} and name = #{name}
    </select>

    <!--====================================================================================-->

    <!--查询返回多个值
    resultType="". 如果返回的是列表，写的是列表里面元素的类型

    查询单条记录封装map,列名为key,值为value resultType="map"

    查询多条记录封装map,key就是这个记录的主键: value就是这条记录封装好的对象:
    resultType= "com. atguigu. bean . Employee"

    *把查询的记录的id的值作为key封装这个mapl
*/
    @Mapkey("id")
    public Map<Integer, Employee> getAll EmpsReturnMap(;

    -->
    <select id="getuserMap" resultType="User">
        select * from person
    </select>

    <!--=======================================================================================-->

    <!--默认mybatis自动封装结果集:
    1)、按照列名和属性名一:一对应的规则 (不区分大小写) ;
    2)、如果不一一对应:
        1)、开启驼峰命名法(满足驼峰命名规则aaa_ bbb
        aaaBbb)
        2)、起别名,在sql语句中起别名
    自定义结果集(resultMap)，自己定义每一-列数据和javaBean的映射规则
    type=" :指定为哪个javaBean自定义封装规则
    id="":唯一标识:让别名在后面引用
    <resultMap type= "com. atguigu. bean. Cat" id= "mycat">
    指定主键列的对应规则:
    column="id" :指定哪- -列是主键列
    property="" :指定cat的哪个属性封装id这一-列数据
        主键列
        <id property= "id" column= "id"/>
        普通列
        <result property= "name" column= "cName "/>
        <result property= "age" column= "cAge"/>
        <result property= "gender" column= "cgender"/>
    </resultMap>

    resultType="com. atguigu. bean.Cat".使用默认规则:属性列名一一对应
    resultMap=”mycat" :查出数据封装结果的时候，使用mycat自定义的规则
    <select id= "getCatById" resultmap= "mycat ">
    select
    *
    from t_ cat where id=#{id}
    </select>
-->

<!--======================================================================================-->

    <!--使用联合查询

    key类里有lock类,使用联合属性进行封装
    <select id="getKeyById" resultmap="mykey">
    select k. id,k. keyname ,k. lockid
    1. id lid,1. lockName from t_ key k
    left join t_ lock 1 on k. lockid=l. id
    where k. id =#{id}
    </select>

    <resultMap type= "com. atguigu. bean. Key" id= "mykey">
    <id property= "id" column= "id"/>
    <result property= "keyName”column= "keyname "/>
    <result property= "Lock. id" column="Lid"/>
    <result property= "Lock. LockName”column= "LockName"/>
    </resultMap>

    mybatis推荐的 <association property= ""></association>
        <resultMap type= "com . atguigu. bean. Key" id= "mykey">
            <id property= "id" column="id"/>
            <result property= "keyName”column= "keyname "/>
    接下来的属性是一个对象，自定义这个对象的封装规则:使用association;表示联合了一个对象
    javaType: 指定这个属性的类型
            <association property= "Lock" javaType= "com. atguigu. bean. Lock">
                定义1ock属性对应的这个Lock对象如何封装
                <id property= "id" column="Lid"/>
                <result property= "LockName" column= "LockName"/>
            </association>
        </resultMap>
    -->

    <!--lock类中有个key类的集合

        <select id= "getLockById" resultMap="myLock">
            select 1.*,k.id kid,k. “keyname , k.~ lockid from t_ lock 1
            left join t_ key k on 1. id =k. lockid
            where 1. id=#{id}
        </select>

        <resultMap type= "com . atguigu. bean. Lock" id= "myLock ">
            <id property= "id" column="id"/>
            <result property= "LockName" column="LockName "/>

            collection:定义集合元素的封装
            property=”“:指定哪个属性是集合属性
            javaType:指定对象类型: association
            ofType="":指定集合里面元素的类型

            <collection property= "keys”ofType= "com. atguigu. bean. Key">
                标签体中指定集合中这个元素的封装规则
                <id property= "id" column="kid"/>
                <result property= "keyName" column= "keyname "/>
            </collection>
        </resultMap>
        -->

    <!--不使用联合查询,组合简单查询即分步查询
    <select id= "getKeyByIdSimple" resultMap= "mykeye2 ">
        select * from t_ key where id=#{id}
     </select>
        <resultMap type= "com. atguigu. bean . Key" id= "mykeye2">
            <id property= "id" column= "id"/>
            <result property= "keyName”column= "keyname "/>
            告诉mybatis自己去调用一一个查询查锁子
            select="";指定一一个查询sq1的唯一标识: mybatis 自动调用指定的sq1将查出的lock封装进来
            public Lock getLockByIdSimp1e(Integer id);需要传入锁子id
            告诉mybatis把哪-列的值传递过去
            column:指定将哪一-列的数据传递过去
            <association property= "Lock"
                select= "com. atguigu. dao. LockDao. getLockByIdS imple"
                column= "Lockid">
            </association>
        </resultMap>
        以上方法对于集合也适用,工作中一般不用次方法,因为它要动用数据库两次,所以一般使用连接查询
        -->

    <!--按需加载,有时候,分布查询时,我只想查一个,如果不开起按需加载,则两个都会查,影响数据库性能
    开启按需加载,用到那个查那个,提高性能.全局开启懒加载,部分不想开启可用
    <association property= "Lock”
    select= "com. atguigu. dao. LockDao. getLockByIdsimple”
    column= "Lockid" fetchType= "eager"></ association>

    <settings>
        开启延迟加载开关
        <setting name= "LazyLoadingEnabled" value= "true"/>
        开启属性按需加载
        <setting name= "aggressiveLazyLoading" value= "false"/>
    </settings>
        -->

    <!--===================动态sql===========================================-->

    <!--if标签-->

    <!--
    <select id= "get TeacherByCondition" resultMap= "teacherMap">
        select * from t_ teacher where
        test="", 编写判断条件
        id! =nu1l.取出传入的javaBean属性中的id的值，判断其是否为空
          <where>
            <if test= "id!=null">
                id > #{id}
            </if>
            <if test= "name!=null and name!= ''">
                and teacherName like #{name}
            </if>
            <if test= "birth!=null"> I
                and birth_ date > #{birth}
            </if>
          </where>
          如果id为空,where可以帮我们去除掉前面的and
        </select>
        -->

    <!--trim标签-->

    <!--
        prefix=
        ”"
        :前缀:为我们下面的sq1整体添加一个前缀
        prefixoverrides="":取出整体字符串前面多余的字符
        suffix="":为整体添加一个后缀
        suffixoverrides="";后面哪个多了可以去掉;
        <trim prefix= "where”prefixoverrides= "and"
        suffi xOverrides= "and">
    -->

    <!--foreach标签-->

    <!--帮我们遍历集合的:
        collection="",指定要遍历的集合的key
        close="";以什么结束
        index="i":索引;
        如果遍历的是- -个list;
            index:指定的变量保存了当前索引I
            item:保存当前遍历的元素的值
        如果遍历的是一个map:
            index:指定的变量就是保存了当前遍历的元素的key
            item:就是保存当前遍历的元素的值
        item= "变量名”，每次遍历出的元素起-个变量名方便引用
        open="";以什么开始
        separator="".每次遍历的元素的分隔符

        <select id="getTeacherByIdIn" resultMap= "teacherMap ">
            SELECT * FROM t_ teacher WHERE
            id IN

            <foreach collection="ids" item="id_ item"
                separator=","
                open="(" close=")">
                #{id_ item}
            </foreach>
        </select>

    -->

    <!--choose标签,如果有一个进了其他就不进了-->

    <!--
    <select id= "get TeacherByCondit ionChoose" resultMap= "teacherMap">
        select * from t_ teacher
        <where>
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test= "name!=null and !name. equals (&quot; &quot;)">
                    teacherName=#{ name }
                </when>
                <when test= "birth date!=null ">
                    birth_ date =# {birth}
                </when>
                <otherwise>
                    1=1
                </otherwise>
            </choose>
        </where>
     </select>
    -->

    <!--set标签,可以帮助去除多余的逗号-->

    <!--
        <update id= "update Teacher">
            UPDATE t_ teacher SET
            <set>
                <if test= "name !=null and !name. equals (&quot ;&quot; )">
                teacherName=#{name},
                </if>
                <if test= "course!=null and ! course . equals (&quot ;&quot;)">
                class_ name=#{course},
                </if>
                <if test= "address !=null and laddress . equals (&quot ;&quot;)";
                address=#{address},
                </if>
                <if test= "birth!=null "》
                birth_ date=#{birth}
                </if>
            </set>
            <where>
                id=#{id}
            </where>
        </update>
    -->

    <!--抽取可重用的sql语句-->
    <!--
        <sq1 id="selectSqL ">select * from t_ teacher</sq1>
        <select id= "getTeacherById" resultMap= "teacherMap ">
            <include refid="selectSql">/include>
            where id=#{id}
        </select>
    -->


    <!--实现更新操作-->
    <update id="update">
        update person set name = #{name},age = #{age} where id = #{id}
    </update>

    <!--实现插入操作-->

    <!--获取自增主键,useGeneratedKeys="true" keyProperty="id",实现了它,就可以在对象插入数据库
    之后,获取对象在数据库中的自增主键值,对应测试方法中的增测试的1-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into person (name , age) values (#{name},#{age})
    </insert>

    <!--对于非自增主键,我们就需要全字段插入,但是如果插入对象的主键和数据库中的主键冲突,就
    会发生错误,所以我们要使用selectkey标签查出数据库中最大的主键然后加1赋值给对象主键,
    order指定运行在核心sql语句的顺序
    resultType="integer" 指定返回值类型,和javabean对应字段要匹配
    keyProperty="id" 指定赋值给javabean的那个属性值
    对象主键初始为空就可以了,对应增测试2-->
    <insert id="insert2">
        <selectKey order="BEFORE" resultType="integer" keyProperty="id">
            select max(id)+1 from person
        </selectKey>
        insert into person (id,name,age) values (#{id},#{name},#{age})
    </insert>

    <!--实现删除操作-->
    <delete id="delete">
        delete from person where id = #{id}
    </delete>
</mapper>