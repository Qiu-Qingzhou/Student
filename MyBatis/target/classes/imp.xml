<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--指定要实现的接口-->
<mapper namespace="com.mybatis.dao.Userdao">

    <!--实现查询操作,返回值类型要写全类名-->
    <!--因为起了别名,就可以不用全类名了,推荐还是使用全类名-->
    <select id="getuserbyid" resultType="User">
    select * from person where id = #{id}
  </select>

    <!--传参说明
    1)、单个参数:
    传入基本类型:
    取值: #{随便写}
    传入pojo:

    2)、多个参数:
    取值: #{参数名}是无效了:
    可用: 0,1 (参数的索引)或者param1 , param2 (第几个参数paramN)
    原因:只要传入了多个参数: mybatis会自动的将这些参数封装在一个map中;
    封装时使用的key就是参数的索引和参数的第几个表示
    Map<string,object> map = new HashMap<>() ;
    map. put("1",传入的值) ;map.put("2",“传入的值");
    #{key }就是从这个map中取值:

    3)、@Param: 为参数指定key;命名参数:
    我们可以告诉mybatis,封装参数map的时候别乱来，使用我们指定的key

    4) 传入了pojo (javaBean)
    取值: #{pojo的属性名}

    5)、传入了map :将多个要使用的参数封装起来
    取值: #{key}

    扩展:多个参数:自动封装map;
    method01 (@Param("id")Integer id,String empName , Employee employee);
    Integer id -> #{id}
    String empName -> #{param2}
    Employee employee (取出这个里面的email) - >#{param3. email}

    实际上在mybatis中:两种取值方式:
    #{属性名}:是参数预编译的方式，参数的位置都是用?替代。参数后来都是预编译设置进去的:安全，不会有sql注入问题
    ${属性名}:不是参数预编译，而是直接和sq1语句进行拼串:不安全:
    有: sq1语句只有参数位置是支持预编译的:,如果动态取表名只能使用${}
    -->

    <!--查询返回多个值
    resultType="". 如果返回的是列表，写的是列表里面元素的类型

    查询单条记录封装map,列名为key,值为value resultType="map"

    查询多条记录封装map,key就是这个记录的主键: value就是这条记录封装好的对象:
    resultType= "com. atguigu. bean . Employee"

    *把查询的记录的id的值作为key封装这个mapl
*/
    @Mapkey("id")
    public Map<Integer, Employee> getAll EmpsReturnMap(;

    -->
    <select id="getuserbyidandname" resultType="User">
        select * from person where id = #{id} and name = #{name}
    </select>

    <!--查询返回多个值
    resultType="". 如果返回的是列表，写的是列表里面元素的类型

    查询单条记录封装map,列名为key,值为value resultType="map"

    查询多条记录封装map,key就是这个记录的主键: value就是这条记录封装好的对象:
    resultType= "com. atguigu. bean . Employee"

    *把查询的记录的id的值作为key封装这个mapl
*/
    @Mapkey("id")
    public Map<Integer, Employee> getAll EmpsReturnMap(;

    -->
    <select id="getuserMap" resultType="User">
        select * from person
    </select>

    <!--实现更新操作-->
    <update id="update">
        update person set name = #{name},age = #{age} where id = #{id}
    </update>

    <!--实现插入操作-->

    <!--获取自增主键,useGeneratedKeys="true" keyProperty="id",实现了它,就可以在对象插入数据库
    之后,获取对象在数据库中的自增主键值,对应测试方法中的增测试的1-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into person (name , age) values (#{name},#{age})
    </insert>

    <!--对于非自增主键,我们就需要全字段插入,但是如果插入对象的主键和数据库中的主键冲突,就
    会发生错误,所以我们要使用selectkey标签查出数据库中最大的主键然后加1赋值给对象主键,
    order指定运行在核心sql语句的顺序
    resultType="integer" 指定返回值类型,和javabean对应字段要匹配
    keyProperty="id" 指定赋值给javabean的那个属性值
    对象主键初始为空就可以了,对应增测试2-->
    <insert id="insert2">
        <selectKey order="BEFORE" resultType="integer" keyProperty="id">
            select max(id)+1 from person
        </selectKey>
        insert into person (id,name,age) values (#{id},#{name},#{age})
    </insert>

    <!--实现删除操作-->
    <delete id="delete">
        delete from person where id = #{id}
    </delete>
</mapper>